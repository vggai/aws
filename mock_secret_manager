import json
import unittest
from moto import mock_secretsmanager
import boto3
from your_lambda_file import lambda_handler, get_secret, delete_from_table  # Adjust the import according to your file structure

class TestLambdaFunction(unittest.TestCase):
    @mock_secretsmanager
    def test_get_secret(self):
        # Create a mock secret
        secret_name = 'test_secret'
        secret_value = {'host': 'localhost', 'username': 'user', 'password': 'pass', 'dbname': 'db', 'port': 3306}
        
        client = boto3.client('secretsmanager', region_name='us-east-1')
        client.create_secret(Name=secret_name, SecretString=json.dumps(secret_value))
        
        # Use the get_secret function to retrieve the mock secret
        result = get_secret(secret_name)
        
        # Validate that the retrieved secret matches the mock secret
        self.assertEqual(result, secret_value)

    @patch('your_lambda_file.pymysql.connect')
    def test_delete_from_table(self, mock_db_connect):
        # This part remains the same as your database operations don't need to be mocked by moto
        mock_conn = mock_db_connect.return_value
        mock_cursor = mock_conn.cursor.return_value
        mock_cursor.execute.return_value = True
        mock_conn.commit.return_value = True
        
        query = "DELETE FROM test_table WHERE id = 1"
        db_credentials = {'host': 'localhost', 'username': 'user', 'password': 'pass', 'dbname': 'db', 'port': 3306}
        
        delete_from_table(query, db_credentials)
        
        mock_db_connect.assert_called_with(host='localhost', username='user', password='pass', dbname='db', port=3306)
        mock_cursor.execute.assert_called_with(query)
        
    # Additional tests can be added here

if __name__ == '__main__':
    unittest.main()
